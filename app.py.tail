        return redirect(url_for('index'))
    
    user = User.query.get_or_404(user_id)
    new_role = request.form.get('role')
    
    if new_role in ['admin', 'agent', 'customer']:
        user.role = new_role
        db.session.commit()
        flash('تم تحديث دور المستخدم بنجاح.', 'success')
    else:
        flash('دور المستخدم غير صالح.', 'danger')
    
    return redirect(url_for('admin_users'))

@app.route('/admin/property/<int:property_id>/feature', methods=['POST'])
@login_required
def toggle_featured(property_id):
    """تبديل حالة "مميز" للعقار (للمسؤول)"""
    if current_user.role != 'admin':
        flash('ليس لديك صلاحية القيام بهذا الإجراء.', 'danger')
        return redirect(url_for('index'))
    
    property = Property.query.get_or_404(property_id)
    property.is_featured = not property.is_featured
    db.session.commit()
    
    flash(f'تم {"إضافة" if property.is_featured else "إزالة"} العقار {"إلى" if property.is_featured else "من"} العقارات المميزة.', 'success')
    return redirect(url_for('admin_properties'))

@app.route('/admin/property/<int:property_id>/status', methods=['POST'])
@login_required
def update_property_status(property_id):
    """تحديث حالة العقار (للمسؤول)"""
    if current_user.role != 'admin':
        flash('ليس لديك صلاحية القيام بهذا الإجراء.', 'danger')
        return redirect(url_for('index'))
    
    property = Property.query.get_or_404(property_id)
    new_status = request.form.get('status')
    
    if new_status in ['available', 'sold', 'rented']:
        property.status = new_status
        db.session.commit()
        flash('تم تحديث حالة العقار بنجاح.', 'success')
    else:
        flash('حالة العقار غير صالحة.', 'danger')
    
    return redirect(url_for('admin_properties'))

@app.route('/download_project')
def download_project():
    """رابط لتنزيل المشروع كاملاً"""
    return redirect(url_for('download_project_zip'))

@app.route('/download_project_zip')
def download_project_zip():
    """رابط لتنزيل المشروع كاملاً مع قاعدة البيانات"""
    import io
    import os
    import zipfile
    import datetime
    import tempfile
    import subprocess
    from flask import send_file
    
    # إنشاء ملف مضغوط في الذاكرة
    memory_file = io.BytesIO()
    
    with zipfile.ZipFile(memory_file, 'w', zipfile.ZIP_DEFLATED) as zf:
        # نسخ الملفات الأساسية
        for root, dirs, files in os.walk('.'):
            # استثناء المجلدات غير المرغوب فيها
            if any(exclude in root for exclude in ['__pycache__', '.git', 'venv', 'env', '.env', '.venv', 'instance']):
                continue
                
            for file in files:
                # تخطي أنواع الملفات غير المرغوب فيها
                if file.endswith(('.pyc', '.zip', '.git')) or file.startswith('.'):
                    continue
                
                file_path = os.path.join(root, file)
                arc_path = os.path.join(root.replace('./', ''), file)
                
                # إضافة الملف إلى الأرشيف
                try:
                    zf.write(file_path, arc_path)
                except Exception:
                    continue
        
        # إضافة ملف لاستعادة قاعدة البيانات
        try:
            # إنشاء ملف مؤقت لنسخة احتياطية من قاعدة البيانات
            db_backup_fd, db_backup_path = tempfile.mkstemp(suffix='.sql')
            os.close(db_backup_fd)
            
            # استخراج اسم المستخدم وكلمة المرور وعنوان الخادم واسم قاعدة البيانات من متغير البيئة
            db_url = os.environ.get('DATABASE_URL')
            
            if db_url and 'postgresql' in db_url:
                # استخدام pg_dump لإنشاء نسخة احتياطية من قاعدة البيانات
                subprocess.run([
                    'pg_dump',
                    '--no-owner',
                    '--no-acl',
                    os.environ.get('DATABASE_URL'),
                    '-f', db_backup_path
                ], check=True)
                
                # إضافة ملف النسخة الاحتياطية إلى الأرشيف
                zf.write(db_backup_path, 'database/backup.sql')
                
                # إضافة سكربت استعادة قاعدة البيانات
                restore_script = """#!/bin/bash

# سكربت استعادة قاعدة البيانات
# كيفية الاستخدام: 
# 1. قم بإنشاء قاعدة بيانات جديدة في PostgreSQL
# 2. عدّل المتغيرات أدناه لتناسب إعدادات قاعدة البيانات المحلية
# 3. قم بتشغيل هذا السكربت

# إعدادات قاعدة البيانات - قم بتعديلها
DB_USER="postgres"
DB_PASSWORD="password"
DB_HOST="localhost"
DB_PORT="5432"
DB_NAME="sayouriaqar"

# استعادة قاعدة البيانات
echo "جاري استعادة قاعدة البيانات..."
PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -f database/backup.sql

echo "تم استعادة قاعدة البيانات بنجاح!"
echo "قم بتحديث ملف .env بالمعلومات التالية:"
echo "DATABASE_URL=postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME"
"""
                zf.writestr('restore_db.sh', restore_script)
                
                # إضافة ملف إعدادات بيئة العمل المحلية
                env_file = """# متغيرات البيئة لتشغيل التطبيق محلياً
FLASK_APP=main.py
FLASK_DEBUG=1
# قم بتعديل رابط قاعدة البيانات ليناسب البيئة المحلية
DATABASE_URL=postgresql://postgres:password@localhost:5432/sayouriaqar
# مفتاح سري للتطبيق (قم بتغييره في الإنتاج)
SECRET_KEY=your-secret-key-here

# إعدادات Cloudinary (اختياري)
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret
"""
                zf.writestr('.env.example', env_file)
                
                # إضافة مجلد للصور المحملة
                zf.writestr('static/uploads/.gitkeep', '')
            
            # حذف الملف المؤقت
            os.unlink(db_backup_path)
            
        except Exception as e:
            # في حالة حدوث خطأ، نضيف ملف يوضح المشكلة
            error_message = f"""
# ملاحظة حول استعادة قاعدة البيانات

تعذر إضافة نسخة احتياطية من قاعدة البيانات بسبب الخطأ التالي:
{str(e)}

## كيفية إنشاء قاعدة بيانات جديدة
1. قم بإنشاء قاعدة بيانات PostgreSQL جديدة
2. قم بتعديل ملف .env لاستخدام قاعدة البيانات الجديدة
3. قم بتشغيل التطبيق، وسيتم إنشاء هيكل قاعدة البيانات تلقائياً

البيانات الافتراضية ستكون فارغة، ولكن يمكنك تسجيل الدخول باستخدام:
البريد الإلكتروني: admin@sayouriaqar.com
كلمة المرور: adminpassword
"""
            zf.writestr('database/README.md', error_message)
        
        # إضافة ملف readme
        readme_content = """# تطبيق السيعوري عقار

## كيفية تشغيل التطبيق محلياً
1. قم بتثبيت Python 3.8 أو أحدث
2. قم بتثبيت PostgreSQL وإنشاء قاعدة بيانات جديدة
3. قم بتثبيت المكتبات المطلوبة: `pip install -r requirements.txt`
4. قم بنسخ ملف `.env.example` إلى `.env` وتعديل الإعدادات:
   ```
   FLASK_APP=main.py
   FLASK_DEBUG=1
   DATABASE_URL=postgresql://username:password@localhost:5432/dbname
   SECRET_KEY=your-secret-key
   ```
5. استعادة قاعدة البيانات (اختياري): `bash restore_db.sh`
6. قم بتشغيل الخادم: `flask run` أو `gunicorn --bind 0.0.0.0:5000 main:app`
7. افتح المتصفح على العنوان: `http://localhost:5000`

## معلومات تسجيل الدخول الافتراضية
- البريد الإلكتروني: admin@sayouriaqar.com
- كلمة المرور: adminpassword

## الميزات الرئيسية
- إدارة العقارات: إضافة، تعديل، حذف، وعرض العقارات
- إدارة المستخدمين: التحكم في الأدوار والصلاحيات
- إدارة الحجوزات: متابعة طلبات معاينة العقارات
- إدارة المناطق: تنظيم المناطق والمدن والأحياء
- واجهة سهلة الاستخدام باللغة العربية
- دعم تحميل الصور وعرضها
- خرائط تفاعلية لعرض مواقع العقارات
"""
        zf.writestr('README.md', readme_content)
        
        # إضافة ملف متطلبات النظام
        requirements = """# متطلبات تشغيل التطبيق
Flask==2.3.3
Flask-SQLAlchemy==3.1.0
Flask-Login==0.6.2
Flask-WTF==1.1.1
Werkzeug==2.3.7
psycopg2-binary==2.9.7
email-validator==2.0.0
Pillow==10.0.0
python-dotenv==1.0.0
gunicorn==21.2.0
cloudinary==1.36.0
"""
        zf.writestr('requirements.txt', requirements)
    
    # إعادة ضبط المؤشر إلى بداية الملف
    memory_file.seek(0)
    
    # تحديد اسم الملف المضغوط مع التاريخ
    current_date = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"sayouri_aqar_project_{current_date}.zip"
    
    # إرسال الملف المضغوط كاستجابة للتنزيل
    return send_file(
        memory_file,
        mimetype='application/zip',
        as_attachment=True,
        download_name=filename
    )

# وظيفة لإضافة بيانات أولية
def add_initial_data():
    # إضافة المناطق (المحافظات) اليمنية
    regions_data = [
        'صنعاء', 'عدن', 'تعز', 'الحديدة', 'إب', 'حضرموت', 'ذمار'
    ]
    regions = {}
    for region_name in regions_data:
        existing_region = Region.query.filter_by(name=region_name).first()
        if not existing_region:
            region = Region(name=region_name)
            db.session.add(region)
            db.session.flush()
            regions[region_name] = region
        else:
            regions[region_name] = existing_region
    
    # إضافة المدن
    cities_data = {
        'صنعاء': ['صنعاء القديمة', 'السبعين', 'معين', 'الثورة', 'التحرير', 'الوحدة'],
        'عدن': ['المعلا', 'كريتر', 'خور مكسر', 'المنصورة', 'الشيخ عثمان'],
        'تعز': ['القاهرة', 'المظفر', 'صالة'],
        'الحديدة': ['الميناء', 'الحالي', 'الحوك'],
    }
    
    cities = {}
    for region_name, city_names in cities_data.items():
        region = regions[region_name]
        for city_name in city_names:
            existing_city = City.query.filter_by(name=city_name, region_id=region.id).first()
            if not existing_city:
                city = City(name=city_name, region_id=region.id)
                db.session.add(city)
                db.session.flush()
                cities[f"{region_name}_{city_name}"] = city
            else:
                cities[f"{region_name}_{city_name}"] = existing_city
    
    # إضافة الأحياء
    districts_data = {
        'صنعاء_صنعاء القديمة': ['باب اليمن', 'باب شعوب', 'باب السلام'],
        'صنعاء_السبعين': ['حدة', 'سعوان', 'دارس'],
        'عدن_كريتر': ['صيرة', 'الهيجة', 'الطويلة'],
        'تعز_القاهرة': ['وادي القاضي', 'الجحملية', 'الحوبان'],
        'الحديدة_الميناء': ['يوليو', 'الدريهمي', 'رأس العارة'],
    }
    
    districts = {}
    for city_key, district_names in districts_data.items():
        city = cities[city_key]
        for district_name in district_names:
            existing_district = District.query.filter_by(name=district_name, city_id=city.id).first()
            if not existing_district:
                district = District(name=district_name, city_id=city.id)
                db.session.add(district)
                db.session.flush()
                districts[f"{city_key}_{district_name}"] = district
            else:
                districts[f"{city_key}_{district_name}"] = existing_district
    
    # إضافة أنواع العقارات
    property_types_data = [
        'شقة', 'فيلا', 'بيت', 'أرض', 'مبنى تجاري', 'مكتب'
    ]
    property_types = {}
    for type_name in property_types_data:
        existing_type = PropertyType.query.filter_by(name=type_name).first()
        if not existing_type:
            prop_type = PropertyType(name=type_name)
            db.session.add(prop_type)
            db.session.flush()
            property_types[type_name] = prop_type
        else:
            property_types[type_name] = existing_type
    
    # إنشاء مستخدمين
    users_data = [
        {'username': 'admin', 'email': 'admin@sayouriaqar.com', 'phone': '777123456', 'password': 'adminpassword', 'role': 'admin'},
        {'username': 'agent1', 'email': 'agent1@sayouriaqar.com', 'phone': '777111222', 'password': 'password123', 'role': 'agent'},
        {'username': 'customer1', 'email': 'customer1@gmail.com', 'phone': '773333444', 'password': 'password123', 'role': 'customer'},
    ]
    
    users = {}
    for user_data in users_data:
        existing_user = User.query.filter_by(email=user_data['email']).first()
        if not existing_user:
            user = User(
                username=user_data['username'],
                email=user_data['email'],
                phone=user_data['phone'],
                role=user_data['role'],
                is_active=True
            )
            user.set_password(user_data['password'])
            db.session.add(user)
            db.session.flush()
            users[user_data['username']] = user
        else:
            users[user_data['username']] = existing_user
    
    # إضافة عقارات
    properties_data = [
        {
            'title': 'شقة فاخرة في صنعاء القديمة',
            'description': 'شقة فاخرة ومؤثثة بالكامل في صنعاء القديمة. تتكون من 3 غرف نوم وصالتين ومطبخ حديث وحمامين.',
            'price': 75000.0,
            'area': 150.0,
            'bedrooms': 3,
            'bathrooms': 2,
            'address': 'صنعاء القديمة، باب اليمن، شارع الجامع الكبير',
            'district_key': 'صنعاء_صنعاء القديمة_باب اليمن',
            'latitude': 15.3548,
            'longitude': 44.2095,
            'property_type': 'شقة',
            'transaction_type': 'sale',
            'is_featured': True,
            'status': 'available',
            'owner': 'agent1'
        },
        {
            'title': 'فيلا فخمة في حي حدة',
            'description': 'فيلا فخمة حديثة البناء في حي حدة، مساحة واسعة، حديقة خاصة، موقف سيارات، 5 غرف نوم، 4 حمامات، مجلس كبير، غرفة طعام، مطبخ واسع مع جزيرة وسط، نظام حماية ومراقبة.',
            'price': 250000.0,
            'area': 400.0,
            'bedrooms': 5,
            'bathrooms': 4,
            'address': 'حدة، شارع الستين، بجوار مدرسة الأندلس',
            'district_key': 'صنعاء_السبعين_حدة',
            'latitude': 15.3358,
            'longitude': 44.1895,
            'property_type': 'فيلا',
            'transaction_type': 'sale',
            'is_featured': True,
            'status': 'available',
            'owner': 'agent1'
        },
        {
            'title': 'مكتب للإيجار في وسط المدينة',
            'description': 'مكتب مجهز بالكامل في وسط صنعاء، مكيف، انترنت، أثاث مكتبي، غرفة اجتماعات',
            'price': 500.0,
            'area': 80.0,
            'bedrooms': 0,
            'bathrooms': 1,
            'address': 'التحرير، شارع الزبيري، برج الأمل الطابق 3',
            'district_key': 'صنعاء_صنعاء القديمة_باب اليمن',
            'latitude': 15.3608,
            'longitude': 44.2025,
            'property_type': 'مكتب',
            'transaction_type': 'rent',
            'is_featured': True,
            'status': 'available',
            'owner': 'agent1'
        },
        {
            'title': 'قطعة أرض استثمارية في عدن',
            'description': 'قطعة أرض كبيرة صالحة للاستثمار السكني أو التجاري، موقع ممتاز في عدن، قريبة من الطريق الرئيسي، جميع الخدمات متوفرة.',
            'price': 120000.0,
            'area': 1200.0,
            'bedrooms': 0,
            'bathrooms': 0,
            'address': 'المنصورة، بالقرب من مدينة الشعب، عدن',
            'district_key': 'عدن_كريتر_صيرة',
            'latitude': 12.7852,
            'longitude': 45.0185,
            'property_type': 'أرض',
            'transaction_type': 'sale',
            'is_featured': False,
            'status': 'available',
            'owner': 'admin'
        },
        {
            'title': 'شقة للإيجار الشهري في تعز',
            'description': 'شقة مفروشة للإيجار الشهري، مناسبة للعوائل، غرفتين نوم، صالة، مطبخ، حمام، ماء وكهرباء 24 ساعة، انترنت مجاني، موقف سيارة.',
            'price': 300.0,
            'area': 110.0,
            'bedrooms': 2,
            'bathrooms': 1,
            'address': 'القاهرة، شارع الستين، بجوار مستشفى الثورة، تعز',
            'district_key': 'تعز_القاهرة_وادي القاضي',
            'latitude': 13.5794,
            'longitude': 44.0185,
            'property_type': 'شقة',
            'transaction_type': 'rent',
            'is_featured': False,
            'status': 'available',
            'owner': 'agent1'
        }
    ]
    
    for property_data in properties_data:
        district = districts[property_data['district_key']]
        property_type = property_types[property_data['property_type']]
        owner = users[property_data['owner']]
        
        # التحقق من عدم وجود العقار بنفس العنوان
        existing_property = Property.query.filter_by(
            title=property_data['title'],
            district_id=district.id
        ).first()
        
        if not existing_property:
            new_property = Property(
                title=property_data['title'],
                description=property_data['description'],
                price=property_data['price'],
                area=property_data['area'],
                bedrooms=property_data['bedrooms'],
                bathrooms=property_data['bathrooms'],
                address=property_data['address'],
                district_id=district.id,
                latitude=property_data['latitude'],
                longitude=property_data['longitude'],
                property_type_id=property_type.id,
                transaction_type=property_data['transaction_type'],
                is_featured=property_data['is_featured'],
                status=property_data['status'],
                owner_id=owner.id
            )
            db.session.add(new_property)
            db.session.flush()
            
            # إضافة صورة افتراضية للعقار
            property_image = PropertyImage(
                property_id=new_property.id,
                image_path='img/property-placeholder.jpg',
                is_main=True
            )
            db.session.add(property_image)
    
    # حجوزات معاينة
    # قم بإنشاء حجوزات فقط إذا كان هناك عقارات وعملاء متاحين
    properties = Property.query.all()
    customers = User.query.filter_by(role='customer').all()
    
    if properties and customers:
        from datetime import timedelta
        
        for i in range(min(3, len(properties))):
            property = properties[i]
            customer = customers[0]  # استخدم العميل الأول 
            
            # تحقق من وجود الحجز
            existing_booking = Booking.query.filter_by(
                property_id=property.id,
                user_id=customer.id
            ).first()
            
            if not existing_booking:
                # تاريخ حجز في المستقبل (بعد 3 أيام من الآن)
                booking_date = datetime.now() + timedelta(days=3 + i)
                
                booking = Booking(
                    property_id=property.id,
                    user_id=customer.id,
                    booking_date=booking_date,
                    notes=f'طلب معاينة للعقار {property.title}',
                    status='pending',
                    created_at=datetime.now()
                )
                db.session.add(booking)
    
    # حفظ جميع التغييرات
    db.session.commit()

# تم نقل وظيفة تنزيل المشروع إلى الأعلى
                # تجاهل المجلدات الخاصة
                if '__pycache__' in root or '.git' in root or '.env' in root or 'venv' in root:
                    continue
                
                for file in files:
                    # تجاهل ملفات معينة
                    if file.endswith('.pyc') or file == '.env':
                        continue
                    
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, '.')
                    zipf.write(file_path, arcname)
            
            # إضافة ملف README.md
            readme_content = """# تطبيق السيعوري عقار

## نظرة عامة
تطبيق ويب لإدارة وعرض العقارات في اليمن، يوفر منصة للبحث عن العقارات وحجز مواعيد المعاينة وإدارة العقارات.

## مميزات التطبيق
- تسجيل المستخدمين وإدارة الحسابات
- عرض وتصفح العقارات مع إمكانية البحث والتصفية
- عرض العقارات على الخريطة
- حجز مواعيد معاينة للعقارات
- لوحة تحكم للمسؤولين لإدارة العقارات والمستخدمين والحجوزات

## متطلبات التشغيل
- Python 3.8+
- Flask
- PostgreSQL

## طريقة التثبيت
1. قم بإنشاء بيئة افتراضية جديدة:
   ```
   python -m venv venv
   source venv/bin/activate  # لينكس/ماك
   venv\\Scripts\\activate  # ويندوز
   ```

2. قم بتثبيت المكتبات المطلوبة:
   ```
   pip install -r requirements.txt
   ```

3. قم بإعداد قاعدة البيانات:
   - أنشئ قاعدة بيانات PostgreSQL جديدة
   - قم بإعداد متغيرات البيئة في ملف .env

4. قم بتشغيل التطبيق:
   ```
   flask run
   ```

## بيانات الدخول
- المدير: admin@sayouriaqar.com / adminpassword
- وكيل: agent1@sayouriaqar.com / password123 
- مستخدم عادي: customer1@gmail.com / password123
"""
            zipf.writestr('README.md', readme_content)
            
            # إضافة ملف requirements.txt
            requirements_content = """flask==2.0.1
flask-sqlalchemy==3.0.0
flask-login==0.6.0
flask-wtf==1.0.0
werkzeug==2.0.2
email-validator==1.1.3
gunicorn==20.1.0
psycopg2-binary==2.9.3
pillow==9.0.0
cloudinary==1.29.0
python-dotenv==0.19.2
"""
            zipf.writestr('requirements.txt', requirements_content)
        
        memory_file.seek(0)
        return send_file(
            memory_file,
            as_attachment=True, 
            download_name='sayouriaqar_project.zip',
            mimetype='application/zip'
        )
    except Exception as e:
        flash(f'حدث خطأ أثناء محاولة تنزيل المشروع: {str(e)}', 'danger')
        return redirect(url_for('index'))

# إنشاء قاعدة البيانات وإضافة البيانات الأولية
with app.app_context():
    db.create_all()
    add_initial_data()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)